/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define HRML(k1,k2,k3,k4) &ht LGUI k1  &ht LALT k2  &ht LCTRL k3  &ht LSHIFT k4

#define LTR 0
#define NAV 1
#define SYM 2
#define NUM 3
#define SON 4
#define TRI 5

&mt {
  //  flavor = "tap-preferred";
   // tapping_term_ms = <200>;
};

/ { 

    behaviors {
        ht: hold_tap {
            label = "hold_tap";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";
        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };
        
        combo_tab {
            timeout-ms = <50>;
            key-positions = <10 11>;
            bindings = <&kp TAB>;
        };
        
        combo_ralt {
            timeout-ms = <50>;
            key-positions = <17 16>;
            bindings = <&kp RALT>;
        };
        
        combo_lalt {
            timeout-ms = <50>;
            key-positions = <11 12>;
            bindings = <&kp LALT>;
        };
        
        combo_lgui {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&kp LGUI>;
        };
        
        
       combo_rgui {
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&kp RGUI>;
        };  
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <SYM NUM>;
            then-layer = <TRI>;
        };
    };

    keymap {
        compatible = "zmk,keymap";
                
       	default_layer {
		    bindings = <
		//╭──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────╮
        //│  Q       │  W       │  F       │  P       │  B       │   │  J       │  L       │  U       │  Y       │  '       │
            &kp Q      &kp W      &kp F      &kp P      &kp B          &kp J      &kp L      &kp U      &kp Y      &kp LS(NON_US_HASH)
        //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
        //│  A       │  R       │  S       │  T       │  G       │   │  M       │  N       │  E       │  I       │  O       │
        HRML(A,         R,         S,         T)       &kp G          &kp M  &ht RSHIFT N  &ht RCTRL E  &lt SON I  &ht RGUI O
        //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
        //│  Z       │  X       │  C       │  D       │  V       │   │  K       │  H       │ , <      │ . >      │ ?        │
            &kp Y      &kp X      &kp C      &kp D      &kp V          &kp K      &kp H      &kp COMMA  &kp DOT    &kp LS(MINUS)
        //╰──────────┴──────────┴──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┴──────────┴──────────╯
                                        &lt NAV SPACE  &lt NUM TAB   &lt SYM ENTER  &mt LSHIFT BACKSPACE
        //                                 ╰──────────┴──────────╯   ╰──────────┴──────────╯                   
		    >;
		};

       	nav_layer {
		    bindings = <
		&trans &trans &trans &trans &trans		&trans &kp INS &kp DEL &trans  &trans 
		&trans &trans &trans &trans &trans 		&kp PSCRN &kp LEFT  &kp UP &kp DOWN  &kp RIGHT 
		&trans &trans &trans &trans &trans   	&trans &kp HOME &kp PG_UP &kp PG_DN  &kp END 
					    &kp SPACE &kp TAB       &kp ESC  &mt LSHIFT BACKSPACE 
		    >;
		};
		
		sym_layer {
		    bindings = <
		&kp RA(E)  &kp RA(N7) &kp RA(N0)  &kp LS(N8)  &kp LS(N9)    			    &kp RA(N8) &kp RA(N9) &kp LS(RBKT) &kp RA(RBKT) &trans 
		&kp GRAVE  &kp RBKT  &kp LS(N0)  &kp SLASH  &kp LS(N4) 			            &kp LS(NON_US_HASH) &kp LS(N2) &kp LS(N7) &kp LS(DOT) &kp LS(NON_US_BACKSLASH)
		&kp LS(COMMA) &kp LS(N5) &kp RA(NON_US_BACKSLASH) &kp LS(SLASH) &kp RA(Q)   &kp LS(N1) &kp LS(EQUAL) &kp NON_US_HASH &kp LS(N6) &kp NON_US_BACKSLASH
					                    &kp ESC &kp RA(MINUS)                       &kp ENTER &mt LSHIFT BACKSPACE
		    >;
		};

        num_layer {
		    bindings = <
		&trans &kp N7 &kp N8 &kp N9 &trans                  			&trans &kp F1 &kp F2 &kp F3 &kp F4 &trans 
		&kp N0 &kp N4 &kp N5 &kp N6 &trans 			                    &trans &kp F5 &kp F6 &kp F7 &kp F8 &trans
		&trans &kp N1 &kp N2 &kp N3 &trans  			                &trans &kp F9 &kp F10 &kp F11 &kp F12 &trans
					  &kp SPACE &kp TAB                   				&kp ESC  &mt LSHIFT BACKSPACE
		    >;
		};

        son_layer {
		    bindings = <
		&trans &trans &trans &trans &trans    			    &trans &trans &kp LBKT &trans &trans 
		&kp SINGLE_QUOTE &trans &kp MINUS &trans &trans     &trans &trans &trans &trans &trans
		&trans &trans &trans &trans &trans    			    &trans &trans &trans &trans &trans
                            &kp SPACE &kp TAB   			&kp ESC  &mt LSHIFT BACKSPACE
		    >;
		};	
		
		tri_layer {
		    bindings = <
		&trans &trans &trans &bt BT_PRV &bt BT_CLR			                    &trans &trans &trans &trans &trans
		&bt BT_SEL 0 &bt BT_SEL 1  &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4  		&trans &bt BT_NXT &trans &trans &trans 
		&trans &trans &trans &trans &trans   				                    &trans &trans &trans &trans &trans
					        &trans &trans  					                    &trans &trans 
		    >;
		};	
        
	};
};
